
local M = {}

function M.warn_module_import_fail(name)
    vim.notify("Module " .. name .. " failed to load", "warn")
end

----------------

function M.take(array, n)
    return table.move(array, 1, n, 1, {})
end


function M.map(array, func)
    local new_array = {}
    for k, v in pairs(array) do
        new_array[k] = func(v, k)
    end

    return new_array
end


function M.any(array, condition)
    local result = false
    for _, v in pairs(array) do
        result = condition(v)
        if result then break end
    end
    return result
end


function M.filter(array, condition)
    local new_array = {}
    for k, v in pairs(array) do
        if condition(v) then
            new_array[k] = v
        end
    end

    return new_array
end


function M.map_filter(array, condition, func)
    local i = 1
    local new_array = {}
    for j, v in ipairs(array) do
        if condition(v) then
            new_array[i] = func(v, j)
            i = i + 1
        end
    end
    return new_array
end


function M.dump(o)
    if type(o) == "table" then
        local s = "{ "
        for k, v in pairs(o) do
            if type(k) ~= "number" then k = '"' .. k .. '"' end
            s = s .. "[" .. k .. "] = " .. M.dump(v) .. ", "
        end
        return s .. "} "
    else
        return tostring(o)
    end
end


----------------

M.Signs = {
    HINT = "",
    INFO = "",
    WARNING = "",
    ERROR = "",
    DEBUG = "",
    TRACE = "✎"
}

----------------

M.Headers = {
    {
        [[⠀⢀⡌⣚⣭⣾⡿⡷⡷⠷⢻⢻⠣⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀]],
        [[⡨⣻⣿⡿⣛⡭⡖⡕⢕⠉⠀⠀⠀⠀⡈⢤⣚⣝⣝⢭⢪⡄⢈⠀⠀]],
        [[⣽⣿⢿⢶⣭⣾⡿⣷⣯⣞⡊⠈⣀⣖⣾⣿⡷⠳⠳⡳⡷⣿⣮⢭⢌]],
        [[⣿⣿⠐⣿⡿⢭⣚⢪⣚⣻⣿⡽⢇⣿⡿⣙⣾⣿⣿⣯⣞⣚⣻⣿⢾]],
        [[⣿⣿⢈⣿⣯⢺⢻⣻⣿⣴⣿⠏⣰⣿⡏⣿⣟⣬⣮⠖⣿⣯⢡⣿⣿]],
        [[⢽⣿⣯⣛⠳⡷⡷⢷⣋⣿⢿⠼⣃⣷⣿⢝⠳⢻⡥⢏⣿⠿⣼⣰⣿]],
        [[⠐⡒⣻⣷⣿⣿⣿⣿⢷⡛⡖⡄⡄⡥⢽⡷⣿⣮⣿⡷⡛⠲⡏⣿⣿]],
        [[⠀⣰⣰⣯⣢⠂⢢⣮⣭⣾⡿⡷⡷⣿⣮⢽⢦⠢⠢⠑⢀⢴⣽⡿⡫]],
        [[⠀⣰⣰⣿⣰⠀⠞⣾⣿⣥⣒⣾⣿⣮⠽⣿⣯⡫⠈⡬⣫⡿⣿⠶⠁]],
        [[⠀⠐⠼⣿⣏⣇⢇⣷⣿⡺⣴⡷⢧⣿⣿⣲⣿⠏⠟⢳⡕⠒⠀⠀⠀]],
        [[⠀⠀⠰⢽⣿⣯⢽⣗⡻⣿⣯⣮⣿⣷⢧⣼⣿⣇⠃⠀⠀⠀⠀⠀⠀]],
        [[⠀⠀⠀⠐⡒⡻⣿⣯⣞⣍⢞⣝⣌⣮⣿⢷⡭⠁⠀⠀⠀⠀⠀⠀⠀]],
        [[⠀⠀⠀⠀⠀⠐⠠⠑⠳⠳⠳⠳⠳⠓⠡⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀]],
    },
    {
        [[  ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠏⠀⠀⠀⠀⠀⠀⠀⠀    ]],
        [[  ⠀⠀⠀⠀⠀⠀⠀⠀⣾⣷⣿⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀  ]],
        [[  ⠀⠀⡠⡮⢌⠀⠀⣰⣿⣾⣻⣯⠈⠀⠀⠀⠀⠀⠀⠀⠀  ]],
        [[  ⠀⠀⠀⣳⣿⣯⢌⠰⣿⡽⣯⠽⣷⣮⠌⠀⠀⠀⠀⠀⠀  ]],
        [[  ⠀⠀⠀⣸⣿⣾⣷⣎⣱⣿⠹⣿⢎⡱⣿⠌⠀⢈⣌⢌⠀  ]],
        [[  ⠀⠀⣀⣿⠇⣿⠼⣿⣼⡿⠀⣰⣿⠀⣿⣏⣾⣷⣿⠃⠀  ]],
        [[  ⠀⣨⣿⠓⣨⣿⣀⣟⢷⣉⣌⣿⣏⣨⣿⡿⣽⣳⣿⠀⠀  ]],
        [[  ⣠⣿⠇⣠⣿⣃⣿⣃⣿⢗⣌⣜⢽⣷⣿⣯⣿⠰⣿⢎⠀  ]],
        [[  ⣰⣿⠀⣰⣿⣰⣿⣰⣿⣷⣟⠝⣿⠟⣿⠏⣿⠏⠰⣿⠎  ]],
        [[  ⠐⣷⣏⡸⣿⠌⣷⣏⡻⣯⣎⣮⠷⣉⣿⠃⣿⠏⣨⣿⠃  ]],
        [[  ⠀⠀⠱⡷⡷⣿⢌⠹⡷⣯⣮⣮⡶⠳⢉⣼⡿⡶⠷⠁⠀  ]],
        [[  ⠀⠀⠀⠀⠀⠐⠱⡷⣷⣮⣮⣮⣮⡷⠳⠑⠀⠀⠀⠀⠀  ]],
    },
    {
        [[⠀⠀⠀⠀⢀⠀⣈⣭⣮⣿⣿⣿⡷⡷⡷⣿⣿⣮⣞⢌⠀⠀⠀⠀⠀]],
        [[⠀⠀⠀⢀⣭⣿⡿⠷⢳⢻⠳⡷⣿⣮⢭⢊⣌⣝⣻⣿⣿⣞⡊⠈⠀]],
        [[⠀⢠⣭⡿⢻⢩⠘⠀⠀⠀⢨⢺⢊⠵⣿⣿⣛⢽⣷⣿⣿⣻⣿⢎⢀]],
        [[⢔⣾⣿⣿⡷⡷⣷⣿⣮⣿⠷⠳⡳⣯⣸⣿⣽⣷⣾⣻⣿⣩⣹⣿⠎]],
        [[⣼⣿⣓⢢⣘⣝⢩⣒⣳⣿⣸⣿⢟⣿⣧⣿⡷⣿⣿⣿⣯⣮⣮⣿⣿]],
        [[⣿⠏⣬⡿⠛⢹⡻⣯⠐⣿⣯⣝⣟⣯⣿⣿⣿⡷⢻⢻⠑⡕⡕⣳⣿]],
        [[⣿⠏⣷⣏⡰⣿⣯⡿⣸⣿⣗⠻⣻⣽⡿⠓⠩⢉⣭⣮⣿⣿⣿⣿⣿]],
        [[⣿⣯⢘⡷⣯⣌⣬⣾⡷⢣⣛⣾⡿⡛⡚⣚⣾⡿⠻⢕⡠⠀⢪⣺⣿]],
        [[⣳⣿⣿⣿⣮⣮⣮⣮⣿⡷⠳⠑⢔⣚⣾⡿⡛⢒⣈⣮⣿⡿⣷⣿⠿]],
        [[⠒⣷⣯⣌⢙⢙⢙⢉⢪⣚⣍⣮⡿⠷⢕⢤⣭⣿⡷⡓⢡⣂⣿⡿⠩]],
        [[⠀⠑⡻⣿⣿⡿⡷⡷⡷⠷⢻⠕⡂⣈⣬⣿⢷⢥⡀⢨⣭⣿⢷⠀⠀]],
        [[⠀⠀⠀⠒⠳⣷⣿⣮⣮⣮⣮⣾⣿⣿⢻⣉⣍⣮⣿⡿⠳⠡⠁⠀⠀]],
        [[⠀⠀⠀⠀⠀⠀⠂⠑⠱⠳⠳⠳⠳⠳⠳⠳⠳⠑⠡⠀⠀⠀⠀⠀⠀]],
    },
    {
        [[⠀⠀⠀⠀⠀⢀⣬⣿⣿⡷⡷⡷⡷⡷⡷⡷⣿⣿⣎⠀⠀⠀⠀⠀ ]],
        [[⠀⠀⠀⠀⠀⣾⣿⠓⠂⠀⢀⣈⣝⣝⢌⠈⠠⡱⣿⠎⠀⠀⠀⠀⠀]],
        [[⠀⠀⠀⠀⣰⣿⠟⢄⣌⣾⡿⡷⡷⡷⣷⣿⣎⣂⣳⣿⠌⠀⠀⠀⠀]],
        [[⠀⠀⠀⢂⣿⡿⣐⣾⣿⠓⢂⣘⣍⣌⣌⠽⣿⣏⠒⣿⣯⠀⠀⠀⠀]],
        [[⠀⠀⠀⣾⣿⠁⣼⣿⠏⣂⣿⠓⠅⠐⣱⣿⣹⣿⠰⡸⣿⣏⠀⠀⠀]],
        [[⠀⠀⣼⣿⠇⠂⣰⣿⠏⠼⣿⢼⡳⡦⡷⣃⣿⡿⠐⠀⣱⣿⠎⠀⠀]],
        [[⠀⣠⣿⠿⠀⠀⠀⡳⣿⣞⠺⡷⣿⣿⣿⡷⠳⠁⠀⠀⠐⣿⣿⠌⠀]],
        [[⢂⣿⣿⠁⠀⠀⠀⠀⠐⡳⣷⣿⣮⣮⡦⠳⠀⠀⠀⠀⠠⣰⣿⣯⢀]],
        [[⣼⣿⠏⢨⢪⢊⢈⢈⣈⣌⣍⣌⠊⢀⢈⣌⣌⣌⣌⣌⣌⠌⣿⣿⠎]],
        [[⣿⣿⠀⡷⡷⡷⡷⡷⡷⡷⣷⣿⣏⣿⣿⠳⠳⠳⢻⢻⢻⢫⣰⣿⣿]],
        [[⣿⠟⣠⣮⣮⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡷⡷⡷⠗⣿⣿]],
        [[⣿⣯⢈⢨⢪⢪⢪⢪⣈⣌⣬⣿⡿⣿⣿⣌⣌⣌⣌⣝⣝⣝⣍⣿⣿]],
        [[⠳⠳⠳⠳⠳⠳⠳⠳⠳⠳⠳⠳⠃⠱⠳⠳⠳⠳⠳⠳⠳⠳⠳⠳⠁]],
    }
}

return M

